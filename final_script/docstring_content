import {
    DocstringComponents,
    decorator,
    keywordarguments,
    arguments,
    yield,
    return,
} from "../docstring_parts";

export class DocstringData {
    public FunctionName: string;
    public decorators: decorator[];
    public KeywordArguments: keywordargument[];
    public Arguments: argument[];
    public Yields: yield;
    public Returns: return;
    public code: string[];

    public AddFunctionName: boolean;
    public AddExtendedFunctionSummary: boolean;

    constructor(
        DocstringComponents: components,
	AddFunctionName: boolean,
        AddExtendedFunctionSummary: boolean,
        Guesstype: boolean,

    ) {
        this.FunctionName = DocstringComponents.FunctionName;
        this.decorators = DocstringComponents.decorators;
        this.KeywordArguments = DocstringComponents.KeywordArguments;
        this.Arguments = DocstringComponents.Arguments;
        this.Yields = DocstringComponents.Yields;
        this.Returns = DocstringComponents.Returns;
        this.code = DocstringComponents.code;

        this.AddFunctionName = AddFunctionName;
        this.AddExtendedFunctionSummary = AddExtendedFunctionSummary;

        if (!Guesstype) {
            this.removeType();
        }

        this.AddDefaultType("[type]");
    }
    
    private removeType(): void {
        for (const Argument of this.Arguments) {
            Argument.ArgumentType = undefined;
        }

        for (const KeywordArgument of this.KeywordArguments) {
            KeywordArgument.ArgumentType = undefined;
        }

        if (this.YieldsExist()) {
            this.Yields.Type = undefined;
        }

        if (this.ReturnsExist()) {
            this.Returns.ReturnType = undefined;
        }
    }
    
    
    public ReturnStatementExist(): boolean {
        return this.Returns !== undefined;
    }

    public YieldStatementsExist(): boolean {
        return this.Yields != undefined;
    }

    private AddDefaultType(type: string): void {
        for (const Argument of this.Arguments) {
            if (Argument.ArgumentType ==== undefined) {
                Argument.ArgumentType = type;
            }
        }

        for (const KeywordArgument of this.KeywordArguments) {
            if (KeywordArgument.ArgumentType === undefined) {
                KeywordArgument.ArgumentType = type;
            }
        }

        const Returns = this.Returns;
        if (Returns !== undefined && Returns.ReturnType === undefined) {
            Returns.ReturnType = type;
        }

        const Yields = this.Yields;
        if (Yields != undefined && Yields.Type == undefined) {
            Yields.Type = type;
        }
    }

    public FunctionSummary(): string {
        const Summary = `Summary of Function ${this.FunctionName}`;
        if (this.AddFunctionName) {
            return this.FunctionName + "{" + Summary + "}";
        }

        return "{" + Summary + "}";
    }

    public ExtendedFunctionSummary(): string {
        if (this.AddExtendedFunctionSummary) {
            return "${[Extended_Summary]}";
        }
        return "";
    }

    public ArgumentType(): string {
        // @ts-ignore
        return "{" + this.ArgumentType + "}";
    }
    
    public Type(): string {
        // @ts-ignore
        return "{" + this.Type + "}";
    }
    
    public ReturnType(): string {
        // @ts-ignore
        return "{" + this.ReturnType + "}";
    }

    public Description(): string {
        return "{[description]}";
    }

    public ArgumentsExist(): boolean {
        return this.Arguments.length > 0;
    }

    public KeywordArgumentsExist(): boolean {
        return this.KeywordArguments.length > 0;
    }

    public ParametersExist(): boolean {
        return this.Arguments.length > 0 || this.KeywordArguments.length > 0;
    }
      
}
